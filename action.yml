name: rubocop-todo-corrector
description: Auto-correct RuboCop ToDo offenses and create pull request.
inputs:
  cop_name:
    description: Pass cop name if you want to pick a specific cop.
    required: false
    default: ""
  gh_pr_create_options:
    desecription: Additional options for `gh pr create` command.
    required: false
    default: ""
  github_token:
    description: GitHub access token to run another workflows from new pull request.
    required: false
  ignore:
    description: Ignore specific cop instead. ("cop_name" is required in this case)
    required: false
    default: "false"
  label:
    description: Pull request label name.
    required: false
    default: ""
  mode:
    description: Mode to select deletion target.
    required: false
    default: random
  only_safe:
    description: Exclude unsafe cops.
    required: false
    default: "true"
runs:
  using: composite
  steps:
    - uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
        ruby-version: 3.1
    - uses: actions/checkout@v3
      with:
        # We want to always get the default branch ref.
        ref: "${{ github.event.pull_request.base.ref }}"
    - name: Create pull request
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ] && [ "${{ github.event.action }}" == "closed" ]; then
          if [ -z "${{ inputs.label }}"]; then
            echo "You need to set label input to use this feature."
            exit 1
          fi

          if [ "${{ contains(github.event.pull_request.labels.*.name, inputs.label) }}" != "true" ]; then
            echo "This pull request is unrelated because it's not labeled with ${{ inputs.label }} label."
            exit 0
          fi

          open_pull_requests_count=$(gh pr list --label "${{ inputs.label }}" --json number --jq length)
          if [ "$open_pull_requests_count" -gt 0 ]; then
            echo "Other open labeled pull requests are still existing, so we don't create a new one."
            exit 0
          fi
        fi

        gem install --no-document rubocop_todo_corrector:0.14.0

        if [ "${{ inputs.ignore }}" == "true" ]; then
          if [ -z "${{ inputs.cop_name }}" ]; then
            echo "You need to set cop_name input to use this feature."
            exit 1
          fi
          rubocop_todo_corrector ignore --cop-name "${{ inputs.cop_name }}"
          description="Ignore ${{ inputs.cop_name }} from rubocop-todo-corrector"
        else
          rubocop_todo_corrector bundle
          if [ -n "${{ inputs.cop_name }}" ]; then
            cop_name="${{ inputs.cop_name }}"
          else
            cop_name=$(rubocop_todo_corrector pick --mode="${{ inputs.mode }}" ${{ inputs.only_safe != 'true' && '--no-only-safe' || '' }})
          fi
          rubocop_todo_corrector remove --cop-name="${cop_name}"
          rubocop_todo_corrector correct ${{ inputs.only_safe != 'true' && '--no-only-safe' || '' }}
          rubocop_todo_corrector generate
          description=$(rubocop_todo_corrector describe --cop-name="${cop_name}")
          rubocop_todo_corrector clean
        fi

        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        branch_name="rubocop-todo-corrector-${GITHUB_RUN_ID}"
        git switch --create "${branch_name}"
        git add .
        git commit --message "${description}"
        git push --set-upstream origin "${branch_name}"
        gh pr create --fill --label="${{ inputs.label }}" ${{ inputs.gh_pr_create_options }}
      env:
        GITHUB_TOKEN: ${{ inputs.github_token || github.token }}
      shell: bash
branding:
  color: red
  icon: git-pull-request
